    I decided to use a while loop to iterate through the functions I needed everytime to ensure that the
program ran until the user decided to end the program. Within the while loop, I called multiple functions
in order to fulfill the assignment requirements and I included a check to see when the loop should end.
The check is dependant on a few phrases, including quit, q, stop, and go away.

    I included a class called Data.py. Within the class, there is a constructor and three methods. The 
constructor requires four strings, one called matchString, one called name, one called regexStart, and one called regexEnd.
One method called retName. This method returns the name of the Data object. Another method called retMatchString is needed
for the string matching algorithm. The last method takes in a string which is a file path and it is used to
search that file to find the text between the regexStart and regexEnd which is then printed to an
output.txt file.

    Before the loop, the program calls the initData function which creates a list of Data objects and then initatlizes and 
adds lots of different Data objects. Within the loop, I prompt the user for a question. The program checks to see if the 
companies are mentioned. If so, it calls the findCompany function which checks to see which company is mentioned. This returns 
the file path to the while loop which is then set to the fileName variable. By default, the fileName is set to the file path of 
NVIDIA.
    
    Next, the program calls the function removeFillerWords which is set to the variable choice. This function takes the choice
variable and then removes the question mark at the end if there is one. Then this function splits choice into a list of
strings delimited by spaces. Then it checks to see if certain common words are present in the list and then removes all 
instances of those common words.

    Finally, the program sets the variable exit to the value returned by the function mapQuery. This function creates two 
local variables, one is called highestMap and is set to the first value of the list of Data and the other is called 
highestRatio and is set to a negative value. Then the function iterates through the entire list of Data objects and then
uses a built in function from fuzzywuzzy that finds a ratio of similarities between two strings. This ratio is compared to 
the highest ratio and then sets the highestMap and highestRatio variables accordingly. After the function is done iterating 
through the list, it checks to see if highestRatio is greater than 55. If it is, then it prints certain statements and then
calls the function printString from Data.py. If not, then it calls the handleChitChat function. This function uses mostly 
the same process as the mapQuery function but instead of using the list of Data objects, it uses a list of some basic 
chit chat question. It also prints the corresponding response to the console from another list that includes answers to 
the chit chat questions, and it calls the function findIfQuit if the highestRatio is not over 55.

    The findIfQuit function includes a list of phrases that would be said to quit the program stated earlier in this 
document. This function iterates through this list and checks the similarities with the choice string using a 
partial string matching algorithm from fuzzywuzzy. This ratio is checked with a variable called highestRatio, which is
set to a negative by default. If the highestRatio is greater than 90, then the program returns true and prints certain 
phrases to both the console and output.txt file. If not, then the program prints "I'm sorry. I did not understand the 
question. I will ask again." to the console.

    After going through these functions, the user is prompted once again to enter another question when
The "output.txt" file saves the questions asked and the answers for each time the program is run.  
When the program is started, it clears the output.txt file and then saves the conversation into the file. 